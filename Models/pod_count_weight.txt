data{
	for(i in 1:Nplants){
		totalFlw[i] <- Pods[i]+PodsMissing[i] #Total flowers
	}
	for(i in 1:Npod){
		zeros[i] <- 0 #For zeros trick
		ones[i] <- 1 #For ones trick
	}
}

model{ #Model of seed count per pod ~ pod weight relationship
#Lognorm - bad p.pred. checks
#Gamma - bad p. pred. checks

#Priors #####

# Novules <- 120 #Ovule number, set as fixed. Not enough info to estimate relationships otherwise...
# int.Pol ~ dnorm(-3,.1)  #Probability of ovule fertilization
# slope.Fert ~ dnorm(0.1,.1) #Probability of seed development 

# int.PodMass ~ dnorm(0,0.01) #Intercept of weight-count relationship
# slope.PodMass ~ dnorm(0,0.01) #Intercept of weight-count relationship
# prec.PodMass ~ dgamma(0.01,0.01) #Precision of pod weight

#Pollination rate
# lambda ~ dnorm(5.6,0.1) 
# r ~ dgamma(2,3)
lambda <- 5.685 #Fixed - for now
r <- 0.615
#Pollen success probability
intPol ~ dnorm(-5,.1) #intercept
slopePol ~ dnorm(5,.1) #slope1
#Pod success probability
intPod ~ dnorm(0,.1) 
slopePod ~ dnorm(1,.1)

p <- r/(r+exp(lambda)) #Transformed mean for pollination process (about 0.0022)		 
	# for(pol in 1:Npollen){
		# PollenCount[pol] ~ dnegbin(p,r)	#Actual pollen counts	
	# }		
	meanNegBin <- (r*(1-p))/p #Mean for neg bin process
	simPollenZero <- dnegbin(0,p,r) #Probability of zero pollen per stigma
		
	for(pod in 1:Npod){		
		simPollenCount[pod] ~ dnegbin(p,r)T(SeedCount2[pod],) #Simulate pollen counts on stigmas (must be >= seedcount)				
		# simOvCountN[pod] ~ dnorm(32.15,1/pow(2.66,2)) T(SeedCount2[pod],52) #Simulate ovule counts per pod 
		# simOvCount[pod] <- dround(simOvCountN[pod],0) #Round to integer
		simOvCount[pod] ~ dpois(32.15)T(SeedCount2[pod],) #Simulate ovule counts per pod (must be >= seedcount and <= maxOvNum)
		scalPollen[pod] <- ((simPollenCount[pod])/1000) #Scaled & centered pollen		
		# log(probPol[pod]) <- ifelse(scalPollen[pod]<polBp, #Breakpoint function for pollen receipt. 
			# intPol-slopePol*scalPollen[pod],
			# polBp*(-slopePol)+(scalPollen[pod]-polBp)*slopePol2+intPol)
		#Probability of pollen making it to ovules
		logit(probPol[pod]) <- intPol + slopePol*scalPollen[pod]
		#Proability of pod survival
		logit(probPod[pod]) <- intPod + slopePod*SeedCount[pod]		
		
		#2 possible scenarios:
		#1) PollenCount > OvuleCount & OvuleCount == SeedCount : 
		#	Binomial(SeedCount|ProbPol,Pollen) + Binomial(SeedCount+1|ProbPol,Pollen) + ... + Binomial(Pollen|ProbPol,Pollen) =
		#   (1-pbin(SeedCount-1,probPol,PollenCount))		
		#2) OvuleCount > SeedCount | OvuleCount == PollenCount : Binomial(SeedCount|ProbPol,Pollen)
		
		#LogLik of seeds being fertilized AND pod surviving		
		LLseed[pod] <- ifelse(simOvCount[pod] == SeedCount[pod], 
			log(1-pbin(SeedCount[pod]-1,probPol[pod],simPollenCount[pod])), #This is used about 50% of the time at higher seed counts
			log(dbin(SeedCount[pod],probPol[pod],simPollenCount[pod])))		
		LLpod[pod] <-log(probPod[pod]) #LogLik of pod survival
		LL[pod]<- LLseed[pod]+LLpod[pod] #Total LogLik for seed counts		
		zeros[pod] ~ dpois(-LL[pod]) #Zeros trick for seed likelihood
		
		simFertFailPod[pod] <-dbin(0,probPol[pod],simPollenCount[pod]) #Probability of 0 pollen making it to become seeds| simPollenCount				
		
		simPodFailPod[pod] <-dbin(SeedCount[pod],probPol[pod],simPollenCount[pod])*(1-probPod[pod]) #Probability of pollen surviving AND pod being aborted
		
		for(k in 1:min(simPollenCount[pod],simOvCount[pod]){
			ifelse(simOvCount[pod]==simOvCount,
				1-pbin(k-1,probPol[pod],simPollenCount[pod]),
				ilogit(intPod + slopePod*k))
		}		
		
		#p(no pollen deposition) + p(pollen deposition, but no pollen survival) + p(deposition+survival, but no pod survival)
		totalPodFail[pod] <- simPollenZero+simFertFailPod[pod]+simPodFailPod[pod] 
		# Should be about 0.276
		lik[pod] <- dbeta(totalPodFail[pod],20,52.46) #Beta centered on 0.276		
		ones[pod] ~ dbern(1.0E-06+(lik[pod]/10)) #Ones trick, plus small # for identifiability
							
		resSeedCount[pod] <- abs(SeedCount[pod]-probPol[pod]*simPollenCount[pod]) #Diff b/w predicted and actual
		simSeedCount[pod] ~ dbin(probPol[pod],simPollenCount[pod])T(1,simOvCount[pod])  #Simulate Fertilized seeds
		resSimSeedCount[pod] <- abs(simSeedCount[pod]-probPol[pod]*simPollenCount[pod]) #Diff b/w simulated and actual
	}	
	
	# dbeta(totalPodFail,20,52.46) #Beta dist centered on 0.276 - e.g. curve(dbeta(x,20,52.46),0,1)	
	# for(pod in 1:Nplants){
		# PodsMissing[pod] ~ dbinom(totalPodFail,totalFlw[pod]) #Pod abortion - takes a very long time if coupled with loop above
	# }

	# for(pod in 1:Npod){
		
		# Number of ovules that become fertilized (conditioned on Novules)
		# log(p1[pod]) <- int.Pol 
		# FertCount[pod] ~ dpois(p1[pod]*Novules) 
		
		# Number of fertilized ovules that become seeds (conditioned on FertCount)
		# log(p2[pod]) <- slope.Fert*FertCount[pod] #Model has trouble converging with an intercept term, and has bad p.pred. checks.		
		# SeedCount[pod] ~ dpois((p2[pod]*FertCount[pod])+0.01) 
		
		# #Podweight ~ SeedCount
		# mu.PodMass[pod] <- int.PodMass+slope.PodMass*SeedCount[pod]
		# PodMass[pod] ~ dlnorm(mu.PodMass[pod],prec.PodMass)

		# Posterior predictive checks:
		
		# #Seed count
		# res.SeedCount[pod] <- abs(SeedCount[pod] - p2[pod]*FertCount[pod])
		# #Generate new dataset
		# SeedCount.new[pod] ~ dpois(p2[pod]*FertCount[pod])
		# res.SeedCount.new[pod] <- abs(SeedCount.new[pod] - p2[pod]*FertCount[pod])		
		
		# #Pod weight
		# res.PodMass[pod] <- abs(PodMass[pod] - exp(mu.PodMass[pod]+(1/2*prec.PodMass))) #exp(mu) = median, mean = exp(mu+(sigma^2)/2) = exp(mu + 1/2tau)
		# #Generate new dataset
		# PodMass.new[pod] ~ dlnorm(mu.PodMass[pod],prec.PodMass)
		# res.PodMass.new[pod] <- abs(PodMass.new[pod] - exp(mu.PodMass[pod]+(1/2*prec.PodMass)))	
	# }
	
#Posterior predictive checks
fitSeedCount <- sum(resSeedCount[]) #Seed count resids
fitSimSeedCount <- sum(resSimSeedCount[]) #Simulated seed count resids

# fit.PodMass <- sum(res.PodMass[]) #Pod mass
# fit.PodMass.new <- sum(res.PodMass.new[])	
}